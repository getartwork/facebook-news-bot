AWSTemplateFormatVersion: "2010-09-09"
Description: Facebook messenger news chatbot 
Parameters:
    Stack:
        Description: Stack name
        Type: String
        Default: content-api
    App:
        Description: Application name
        Type: String
        Default: facebook-news-bot
    Stage:
        Description: Stage name
        Type: String
        AllowedValues:
            - PROD
            - CODE
        Default: CODE
    ApplicationPort:
        Description: Port used by the application server
        Type: Number
        Default: 5000
    GuardianIP:
        Description: Ip range for the office
        Type: String
    CertificateArn:
        Description: ARN of the SSL certificate for this service
        Type: String
    AMI:
        Description: AMI ID
        Type: String
    DeployBucket:
        Description: S3 buckets where RiffRaff deploys artifacts
        Type: String
        Default: content-api-dist/content-api
    VPC:
        Description: VPC to run EC2 within
        Type: AWS::EC2::VPC::Id
    Subnets:
        Description: Subnets to run load balancer within
        Type: List<AWS::EC2::Subnet::Id>
    VerifyToken:
        Description: Facebook messenger app verification token
        Type: String
    AccessToken:
        Description: Facebook page access token
        Type: String
    ApiKey:
        Description: CAPI key
        Type: String
        Default: ""
    LoggingKinesisStream:
        Description: The name of the logging kinesis stream
        Type: String
    DefaultImageUrl:
        Description: Url of image to use when no image is available in an article
        Type: String
    FacebookUrl:
        Description: Url of facebook messenger endpoint
        Type: String
        Default: https://graph.facebook.com/v2.6/me/messages
    DynamodbTableName:
        Description: Name of dynamodb table used to store user data
        Type: String

Mappings:
    StageMap:
        PROD:
            MinSize: 1
            MaxSize: 2
            DesiredCapacity: 1
            InstanceType: t2.micro
        CODE:
            MinSize: 1
            MaxSize: 2
            DesiredCapacity: 1
            InstanceType: t2.micro
Resources:
    FacebookNewsBotRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                            - ec2.amazonaws.com
                      Action:
                        - sts:AssumeRole
            Path: /

    BackendDeployPolicy:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: BackendDeployPolicy
            PolicyDocument:
                Statement:
                    - Effect: Allow
                      Action:
                        - s3:GetObject
                      Resource:
                        "Fn::Join":
                            - ""
                            -
                                - "arn:aws:s3:::"
                                - Ref: DeployBucket
                                - "/*"
            Roles:
                - Ref: FacebookNewsBotRole

    Ec2DescribeInstancesPolicy:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: ec2-describe-instances
            PolicyDocument:
                Statement:
                    Effect: Allow
                    Action:
                        - ec2:DescribeInstances
                    Resource:
                        - "*"
            Roles:
                - Ref: FacebookNewsBotRole

    DynamoPolicy:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: dynamo-policy
            PolicyDocument:
                Statement:
                    Effect: Allow
                    Action:
                        - dynamodb:GetItem
                        - dynamodb:PutItem
                        - dynamodb:UpdateItem
                        - dynamodb:Query
                    Resource:
                        "Fn::Join":
                            - ""
                            -
                                - "arn:aws:dynamodb:"
                                - Ref: AWS::Region
                                - ":"
                                - Ref: AWS::AccountId
                                - ":table/"
                                - Ref: DynamodbTableName
                                - "*"
            Roles:
                - Ref: FacebookNewsBotRole

    KinesisSenderPolicy:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: kinesis-sender
            PolicyDocument:
                Statement:
                    - Effect: Allow
                      Action:
                          - kinesis:PutRecord
                          - kinesis:PutRecords
                          - kinesis:DescribeStream
                      Resource:
                          Fn::Join:
                            - ""
                            -
                                - "arn:aws:kinesis:"
                                - Ref: AWS::Region
                                - ":"
                                - Ref: AWS::AccountId
                                - ":stream/"
                                - Ref: LoggingKinesisStream
            Roles:
                - Ref: FacebookNewsBotRole

    InstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                - Ref: FacebookNewsBotRole

    SSHSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId:
              Ref: VPC
            GroupDescription: Allow SSH access from the office
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp:
                    Ref: GuardianIP

    AppServerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId:
              Ref: VPC
            GroupDescription: Application servers
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort:
                    Ref: ApplicationPort
                  ToPort:
                    Ref: ApplicationPort
                  CidrIp:
                    Ref: GuardianIP
                - IpProtocol: tcp
                  FromPort:
                    Ref: ApplicationPort
                  ToPort:
                    Ref: ApplicationPort
                  SourceSecurityGroupId:
                    Ref: LoadBalancerSecurityGroup

    LoadBalancerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId:
              Ref: VPC
            GroupDescription: Application load balanacer
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: "0.0.0.0/0"
                - IpProtocol: tcp
                  FromPort: 443
                  ToPort: 443
                  CidrIp: "0.0.0.0/0"

    LoadBalancer:
        Type: AWS::ElasticLoadBalancing::LoadBalancer
        Properties:
            Scheme: internet-facing
            Subnets:
                Ref: Subnets
            CrossZone: true
            SecurityGroups:
                - Fn::GetAtt: [LoadBalancerSecurityGroup, GroupId]
            Listeners:
                - LoadBalancerPort: 80
                  InstancePort:
                    Ref: ApplicationPort
                  Protocol: HTTP
                - LoadBalancerPort: 443
                  InstancePort:
                    Ref: ApplicationPort
                  Protocol: HTTPS
                  InstanceProtocol: HTTP
                  SSLCertificateId:
                    Ref: CertificateArn
            HealthCheck:
                Target:
                    Fn::Join:
                        - ""
                        -
                            - "HTTP:"
                            - Ref: ApplicationPort
                            - /status
                HealthyThreshold: 2
                UnhealthyThreshold: 10
                Interval: 60
                Timeout: 5
            Tags:
                - Key: Stage
                  Value:
                    Ref: Stage
                - Key: Stack
                  Value:
                    Ref: Stack
                - Key: App
                  Value:
                    Ref: App

    AutoscalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                Ref: Subnets
            LaunchConfigurationName:
                Ref: LaunchConfiguration
            MinSize:
                Fn::FindInMap:
                    - StageMap
                    - Ref: Stage
                    - MinSize
            MaxSize:
                Fn::FindInMap:
                    - StageMap
                    - Ref: Stage
                    - MaxSize
            DesiredCapacity:
                Fn::FindInMap:
                    - StageMap
                    - Ref: Stage
                    - DesiredCapacity
            Cooldown: "180"
            HealthCheckType: ELB
            HealthCheckGracePeriod: 200
            LoadBalancerNames:
                - Ref: LoadBalancer
            Tags:
                - Key: Stage
                  Value:
                    Ref: Stage
                  PropagateAtLaunch: true
                - Key: Stack
                  Value:
                    Ref: Stack
                  PropagateAtLaunch: true
                - Key: App
                  Value:
                    Ref: App
                  PropagateAtLaunch: true

    LaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Metadata:
            AWS::CloudFormation::Authentication:
                instanceAuthentication:
                    type: S3
                    roleName:
                        Ref: FacebookNewsBotRole
                    buckets:
                        - Ref: DeployBucket
            AWS::CloudFormation::Init:
                config:
                    users:
                        content-api:
                            homeDir: /home/content-api
                    sources:
                        /home/content-api:
                            Fn::Join:
                                - /
                                -
                                    - https://s3-eu-west-1.amazonaws.com
                                    - Ref: DeployBucket
                                    - Ref: Stage
                                    - Ref: App
                                    - facebook-news-bot.tgz
                    files:
                        /etc/gu/facebook-news-bot.env:
                            content: { "Fn::Join": [ "" , [
                                "PORT=", {"Ref": "ApplicationPort"}, "\n",
                                "STAGE=", {"Ref": "Stage"}, "\n",
                                "APPLICATION_NAME=", {"Ref": "App"}, "\n",
                                "LOG_FILE_PATH=logs/application.log", "\n",
                                "NODE_ENV=production", "\n",
                                "\n"
                            ]] }
                            owner: content-api
        Properties:
            AssociatePublicIpAddress: true
            IamInstanceProfile:
                Ref: InstanceProfile
            ImageId:
                Ref: AMI
            InstanceType:
                Fn::FindInMap:
                    - StageMap
                    - Ref: Stage
                    - InstanceType
            SecurityGroups:
                - Ref: AppServerSecurityGroup
                - Ref: SSHSecurityGroup
            UserData:
                Fn::Base64:
                    Fn::Join:
                        - "\n"
                        -
                            - "#!/bin/bash -ev"
                            - wget -NP /home/ubuntu/.ssh https://s3-eu-west-1.amazonaws.com/content-api-dist/authorized_keys
                            - Fn::Join:
                                - " "
                                -
                                    - cfn-init
                                    - "-s"
                                    - Ref: AWS::StackId
                                    - "-r LaunchConfiguration"
                                    - "--region"
                                    - Ref: AWS::Region
                                    - "|| error_exit 'Failed to run cfn-init'"
                            - npm install -g pm2
                            - cd /home/content-api
                            - Fn::Join:
                              - ""
                              -
                                - "sed -i"
                                - " -e 's,@@STAGE,"
                                - Ref: Stage
                                - ",g'"
                                - " -e 's,@@STACK,"
                                - Ref: Stack
                                - ",g'"
                                - " logstash.conf"
                            - mv logstash.conf /etc/
                            - mkdir logs
                            - systemctl start logstash
                            - chown -R content-api .
                            - Fn::Join:
                                - ""
                                -
                                    - "sudo -u content-api"
                                    - " VERIFY_TOKEN="
                                    - Ref: VerifyToken
                                    - " ACCESS_TOKEN="
                                    - Ref: AccessToken
                                    - " API_KEY="
                                    - Ref: ApiKey
                                    - " FACEBOOK_URL="
                                    - Ref: FacebookUrl
                                    - " DEFAULT_IMAGE_URL="
                                    - Ref: DefaultImageUrl
                                    - " DYNAMODB_TABLE_NAME="
                                    - Ref: DynamodbTableName
                                    - " pm2 start application.pm2.json"
